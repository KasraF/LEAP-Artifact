parameters:
  - name: targets
    default: []
    type: object
  - name: vcpkgDir
    type: string
  - name: targetDirectory
    type: string
  - name: vcpkgArgs
    type: string
    default: ''

steps:
  - script: |
      set -e
      git clone https://github.com/microsoft/vcpkg.git $(Build.ArtifactStagingDirectory)/vcpkg
      cd $(Build.ArtifactStagingDirectory)/vcpkg && git checkout 3b3bd424827a1f7f4813216f6b32b6c61e386b2e
      sh $(Build.ArtifactStagingDirectory)/vcpkg/bootstrap-vcpkg.sh
      echo "##vso[task.setvariable variable=VSCODE_DID_BOOTSTRAP_VCPKG]true"
    displayName: Bootstrap vcpkg
    condition: not(eq(variables.VSCODE_DID_BOOTSTRAP_VCPKG, true))

  - ${{ each target in parameters.targets }}:
    - task: Cache@2
      inputs:
        key: '"${{ target }}" | ${{ parameters.vcpkgDir }}/vcpkg.json'
        path: ${{ parameters.targetDirectory }}/${{ target }}
        cacheHitVar: VCPKG_CACHE_RESTORED
      displayName: Cache ${{ target }}

    - script: $(Build.ArtifactStagingDirectory)/vcpkg/vcpkg install --triplet=${{ target }} ${{ parameters.vcpkgArgs }}
      displayName: vcpkg install ${{ target }}
      workingDirectory: ${{ parameters.vcpkgDir }}
      condition: ne(variables.VCPKG_CACHE_RESTORED, 'true')

    - script: |
        mkdir -p ${{ parameters.targetDirectory }}
        mv ${{ parameters.vcpkgDir }}/vcpkg_installed/${{ target }} ${{ parameters.targetDirectory }}
        rm -rf ${{ parameters.vcpkgDir }}/vcpkg_installed
      displayName: Stage vcpkg dependencies for ${{ target }}
      condition: ne(variables.VCPKG_CACHE_RESTORED, 'true')
